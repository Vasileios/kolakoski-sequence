#+Title: Kolakoski sequence

In mathematics, the Kolakoski sequence, sometimes also known as the
Oldenburger-Kolakoski sequence,[1] is an infinite sequence of symbols
{1,2} that is its own run-length encoding[2] and the prototype for an
infinite family of related sequences. It was initially named after the
recreational mathematician William Kolakoski (1944–97), who discussed
it in 1965,[3] but subsequent research has revealed that it first
appeared in a paper by Rufus Oldenburger in 1939.(Wikipedia) (https://en.wikipedia.org/wiki/Kolakoski_sequence)

This is a Kolakoski sequence sound example using Python3 and
SuperCollider code.

Dependencies: python-osc

*** Python

#+BEGIN_EXAMPLE
#
#kolakoski sequence
# Builds the list l as it's being
#iterated through.
#For each entry x of l,
#appends x copies of 1 or 2,
#whichever is opposite
#the current last element.

import argparse
import random
import time
from pythonosc import osc_message_builder
from pythonosc import udp_client

client = udp_client.SimpleUDPClient("127.0.0.1", 57120)
l=[1, 2]
#l=[2, -2] # with integer set {2, -2}
##print(1,2)
while True:

    for x in l:
        print(x); l+=x*[l[-1]^3]
        client.send_message("/filter", x)
        time.sleep(1)

#+END_EXAMPLE


*** SuperCollider

#+BEGIN_EXAMPLE

s.waitForBoot{



	fork{
~bufferk = Buffer.read(s,  "/Users/sounds/kick03.wav"); //
		//remember to free the buffer later.
~buffersn = Buffer.read(s,  "/Users/sounds/snare01Stereo.wav");
~bufferhi = Buffer.read(s,  "/Users/sounds/hihat01Stereo.wav");

1.wait;
SynthDef(\kick, {| out = 0, bufnum = 0, amp = 0.3, rate = 1, cutoff = 2000 |
	var source;
	source =  PlayBuf.ar(2, bufnum, BufRateScale.kr(bufnum)*rate, doneAction:2, loop:1);
	source = LPF.ar(source, cutoff+2000);
	    Out.ar(out, source*amp)
}).add;

0.5.wait;

SynthDef(\snare, {| out = 0, bufnum = 1, amp = 0.3, rate = 1, cutoff = 2000 |
var source;
source =  PlayBuf.ar(2, bufnum, BufRateScale.kr(bufnum)*rate, doneAction:2, loop:1);
source = LPF.ar(source, cutoff+2000);
    Out.ar(out, source*amp)
}).add;

SynthDef(\hihat, {| out = 0, bufnum = 2, amp = 0.3, rate = 1, cutoff = 2000 |
var source;
source =  PlayBuf.ar(2, bufnum, BufRateScale.kr(bufnum)*rate, doneAction:2, loop:1);
source = LPF.ar(source, cutoff+2000);
    Out.ar(out, source*amp)
}).add;

~kickx = Synth(\kick, [\out, 0, \bufnum, ~bufferk, \rate, 1]);
1.wait;
~snarex = Synth(\snare, [\out, 0, \bufnum, ~buffersn, \rate, 1]);
1.wait;
~hihatx = Synth(\hihat, [\out, 0, \bufnum, ~bufferhi, \rate, 1]);

1.wait;

OSCdef(\osctest,
      { | args |

					fork{
				"rate and amp for kick:".postln;
				 ~kickx.setn(\rate, args[1].postln, \amp, args[1].abs.reciprocal.postln, \cutoff, args[1].abs.pow(3));
				1.wait;
				"rate and amp for snare:".postln;
				~snarex.setn(\rate, args[1].postln, \amp, args[1].abs.reciprocal.postln, \cutoff, args[1].abs.pow(2));
				1.wait;
				"rate and amp for hihat:".postln;
				~hihatx.setn(\rate, args[1].postln, \amp, args[1].abs.reciprocal.postln, \cutoff, args[1].abs.pow(4));
						};
    },
    '/filter'
    );


  };
}

#+END_EXAMPLE
